#!/usr/bin/env bash

source <(curl -s archibold.io/require)

require echomd
require partid

echoWithHeader() {
  echomd "
# archibold.io
$@
"
}

updateSystemTime() {
  echoWithHeader '
  Welcome to Archibold installer.
  As first step, we are going to update
  the current system time.'

  ntpdate pool.ntp.org
  timedatectl set-local-rtc 1
}

updatePacman() {
  echoWithHeader '
  The pacman manager, also known as *pacman*,
  might also need some update.'

  pacman -Sy
  pacman-db-upgrade
  pacman-key --init
  pacman-key --populate archlinux

}

findTheDisk() {
  local i=0
  local choice=
  local disks=
  local disk=
  echoWithHeader '
  Please select the disk you would like to use
  to install Arch Linux (pick a number).

  *Please note:* #red(all data) in the chosen disk will be #red(lost).'

  for disk in $(lsblk --output NAME); do
    if [ "$(echo $disk | sed -e 's/^[a-z]//')" != "$disk" ]; then
      ((i=i+1))
      disks="$disks $disk"
      echomd "  *$i* /dev/$disk"
    fi
  done

  echo ''
  read -n1 -s choice

  if [ "$choice" -gt "0" ] && [ "$choice" -le "$i" ]; then
    i=0
    for disk in $disks; do
      ((i=i+1))
      if [ "$i" = "$choice" ]; then
        DISK="/dev/$disk"
      fi
    done
  else
    echomd "  #red(*Nope*), let's try again ... "
    sleep 2 && clear && findTheDisk
  fi
}

askAboutUEFI() {
  local choice=
  echoWithHeader "
  Is *${DISK}* installed for a system
  compatible with *UEFI* ? [y/n]"
  read -n1 -s choice
  if [ "$choice" = "y" ] || [ "$choice" = "Y" ]; then
    clear
    if [ "$(uname -m)" = "x86_64" ]; then
      echoWithHeader '
  This system is probably a *64 bit* one.'
    else
      echoWithHeader '
  This system is probably a *32 bit* one.'
    fi
    echo '  Which UEFI version would you like to use?'
    echo '  Please type 32 or 64'
    read -n2 -s -p '' choice
    if [ "$choice" = "32" ] || [ "$choice" = "64" ]; then
      UEFI="$choice"
    else
      echo ''
      echomd "  #red(*Nope*), let's try again ... "
      sleep 2 && clear && askAboutUEFI
    fi
  else
    UEFI="no"
  fi

}

askAboutUEFILike() {
  local choice=
  echoWithHeader "
  Would you like regardless an *UEFI* like
  partition *boot structure* ? [y/n]"
  read -n1 -s choice

  if [ "$choice" = "y" ] || [ "$choice" = "Y" ]; then
    UEFI=yes
  fi

}

askAboutEDD() {
  local choice=
  echoWithHeader "
  Would you like to *disable EDD* ? [y/n]"
  read -n1 -s choice

  if [ "$choice" = "y" ] || [ "$choice" = "Y" ]; then
    EDD=" edd=off"
  fi
}

askAboutSWAP() {
  local choice=
  echoWithHeader "
  How much *swap* do you need?

  Please specify an amount and press enter.

  Valid options can be 0, 100M or 1G or 2Gi, etc"
  read choice

  SWAP=$(echo $choice | sed -r 's/^([0-9]+[A-Z]i)[bB]$/\1/' | numfmt --from=auto)
  if [[ $? -ne 0 ]] ; then
    echo ''
    echomd "  #red(*Nope*), $choice is not valid, let's try again ... "
    sleep 2 && clear && askAboutSWAP
  fi

}

createPartitions() {
  local start=2048s
  local part=
  echoWithHeader "
  Preparing *$DISK*"
  sudo dd if=/dev/zero of=$DISK bs=1 count=2048 > /dev/null 2>&1
  sleep 1
  if [ "$UEFI" = "no" ] || [ "$UEFI" = "yes" ]; then
    echomd '  with an *msdos* label'
    echo ''
    sudo parted --script $DISK mklabel msdos > /dev/null 2>&1
  else
    echomd '  with UEFI *gpt* label'
    echo ''
    sudo parted --script $DISK mklabel gpt > /dev/null 2>&1
  fi
  if [ "$UEFI" != "no" ]; then
    echomd '  with 128MiB *boot* partition'
    echo ''
    sudo parted --script --align optimal $DISK mkpart primary fat16 $start 128MiB > /dev/null 2>&1
    sudo parted $DISK set 1 boot on
    start=128MiB
  fi
  if [ "$SWAP" = "0" ]; then
    echomd '  *without swap* partition'
    echo ''
    sudo parted --script --align optimal $DISK mkpart primary ext4 $start 100% > /dev/null 2>&1
  else
    echomd "  with *$(numfmt --to=si $SWAP) swap* partition"
    ((SWAP=SWAP+134217728))
    SWAP=$(numfmt --to=si $SWAP)
    echo ''
    sudo parted --script --align optimal $DISK mkpart primary linux-swap $start $SWAP > /dev/null 2>&1
    sudo parted --script --align optimal $DISK mkpart primary ext4 $SWAP 100% > /dev/null 2>&1
  fi
  sleep 1
  BOOT=
  ROOT=
  for part in $(ls ${DISK}*); do
    if [ "$part" != "$DISK" ]; then
      if [ "$UEFI" != "no" ] && [ "$BOOT" = "" ]; then
        BOOT=$part
      elif [ "$UEFI" = "no" ] && [ "$SWAP" = "0" ]; then
        ROOT=$part
      elif [ "$SWAP" != "0" ] && [ "$ROOT" = "" ]; then
        SWAP=$part
        ROOT=$part
      else
        ROOT=$part
      fi
    fi
  done
  if [ "$BOOT" != "" ]; then
    clear
    echoWithHeader "
  formatting *boot* partition"
    sudo mkfs.vfat $BOOT
    sleep 1
  fi
  if [ "$SWAP" != "0" ]; then
    clear
    echoWithHeader "
  creating *swap* partition"
    sudo mkswap $SWAP
    sleep 1
  fi
  clear
    echoWithHeader "
  creating *root* partition"
  sudo bash -c "yes | mkfs.ext4 $ROOT"
  partid create $ROOT
  sleep 1
}

askForUser() {
  local choice=
  echoWithHeader "
  Which *user name* would you like to use ?
  Write one and press enter.

  Please note *only lowercase* letters are valid."
  read choice
  if [ "$choice" = "root" ] || [ "$(echo $choice | sed -e 's/[a-z]//g')" != "" ]; then
    echo ''
    echomd "  #red(*Nope*), $choice is not valid, let's try again ... "
    sleep 2 && clear && askForUser
  else
    USER=$choice
  fi
}

# The Archibold Installer
INTEL="$(lscpu | grep GenuineIntel)"
clear && updateSystemTime && sleep 1
clear && updatePacman && sleep 1
if [ "$USER" = "root" ] || [ "$USER" = "" ] || [ "$(echo $USER | sed -e 's/[a-z]//g')" != "" ]; then
  clear && askForUser
fi
if [ "$DISK" = "" ]; then
  clear && findTheDisk
fi
sudo umount ${DISK}* 2> /dev/null
if [ "$UEFI" != "32" ] && [ "$UEFI" != "64" ]; then
  if [ "$UEFI" = "" ]; then
    clear && askAboutUEFI
    if [ "$UEFI" = "no" ]; then
      clear && askAboutUEFILike
      if [ "$EDD" = "" ]; then
        clear && askAboutEDD
      else
        EDD=" edd=$EDD"
      fi
    fi
  else
    UEFI=no
  fi
fi
if [ "$UEFI" = "32" ] || [ "$UEFI" = "64" ]; then
  UEFI="efi${UEFI}"
elif [ "$UEFI" != "yes" ]; then
  UEFI=no
fi
if [ "$SWAP" = "" ]; then
  clear && askAboutSWAP
fi
clear && createPartitions

if [ -d archibold.env ]; then
  sudo rm -rf archibold.env
fi
mkdir archibold.env
sudo mount $ROOT archibold.env
if [ "$BOOT" != "" ]; then
  sudo mkdir -p archibold.env/boot
  sudo mount $BOOT archibold.env/boot
fi

clear
echoWithHeader "
  Bootstrapping *Arch Linux* via
  pacstrap arch-install-scripts base gptfdisk syslinux
"
sleep 1
sudo pacstrap archibold.env arch-install-scripts base gptfdisk syslinux

clear
echoWithHeader "
  Creating basic installation via *arch-chroot*
"
sleep 1
echo "#!/usr/bin/env bash

source <(curl -s archibold.io/utils/partid)

if [ '$INTEL' != '' ]; then
  pacman -S --needed --noconfirm intel-ucode
fi

genfstab -U -p / > /etc/fstab

if [ '$BOOT' != '' ]; then
  sed -ie \"s#$BOOT#UUID=\$(partid $BOOT)#\" /etc/fstab
fi
if [ '$SWAP' != '0' ]; then
  sed -ie \"s#$SWAP#UUID=\$(partid $SWAP)#\" /etc/fstab
fi
sed -ie \"s#$ROOT#UUID=\$(partid $ROOT)#\" /etc/fstab

syslinux-install_update -ia
sed -ie \"s#APPEND root=.*#APPEND root=UUID=\$(partid $ROOT) rw${EDD}#\" /boot/syslinux/syslinux.cfg
if [ '$INTEL' != '' ]; then
  sed -ie 's#INITRD ../initramfs-linux.img#INITRD ../intel-ucode.img,../initramfs-linux.img#' /boot/syslinux/syslinux.cfg
fi

echo -e 'root
root' | passwd

useradd -m -g users -G wheel,storage,power,video,lp -s /bin/bash $USER
echo -e '$USER
$USER' | passwd $USER

# sed -ie 's/ExecStart=-\/sbin\/agetty.*/ExecStart=-\/sbin\/agetty -nia $USER %I \$TERM/' /etc/systemd/system/getty.target.wants/getty@tty1.service

pacman -S --needed --noconfirm dialog wpa_supplicant iw

rm /archibold.install
exit
" > /tmp/install
sudo chmod a+x /tmp/install
sudo mv /tmp/install archibold.env/archibold.install
sudo arch-chroot archibold.env /archibold.install
sudo umount ${DISK}* 2> /dev/null
sleep 5
clear
echoWithHeader "
  Congratulations. Arch Linux is ready.

  Configured users: passwords are

    *root*: *root*
    *$USER*: *$USER*

  Please type #green(shutdown -h now) and
  remove the media after.
"


























